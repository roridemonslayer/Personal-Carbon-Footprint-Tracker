import React, { useEffect, useState, useRef } from 'react';
import { LeafIcon, MessageCircleIcon, XIcon, SendIcon } from 'lucide-react';

// Fun facts about carbon footprints
const funFacts = [
  'A single tree can absorb up to 48 pounds of CO2 per year! 🌳', 
  'Taking one less car trip per week reduces your carbon footprint by about 1% annually! 🚶‍♂️', 
  'A vegetarian meal saves around 1.5kg of CO2 compared to a meat-based meal! 🥗', 
  'LED bulbs use 90% less energy than traditional bulbs! 💡', 
  'Remote work can reduce your carbon footprint by up to 1,800 pounds of CO2 per year! 🏠', 
  'Recycling one aluminum can saves enough energy to power a TV for 3 hours! ♻️', 
  'A laptop uses 80% less energy than a desktop computer! 💻',
  'The average Americans carbon footprint is 16 tons, one of the highest in the world! 🌎',
  'Flying round trip from New York to London generates about 986 kg of CO2 per passenger! ✈️',
  'Eating locally produced food can reduce CO2 emissions from transportation by up to 5%! 🥕',
  'Using public transportation instead of driving can reduce your carbon footprint by 4,800 pounds annually! 🚌',
  'Food waste accounts for about 8% of global greenhouse gas emissions! 🍎',
  'An electric car produces about half the CO2 emissions of a conventional car over its lifetime! 🚗',
  'The fashion industry produces 10% of global carbon emissions! 👕'
];

// Knowledge base for common questions
const knowledgeBase = {
  'carbon footprint': 'A carbon footprint is the total amount of greenhouse gases (including carbon dioxide and methane) that are generated by our actions. The average person generates about 4 tons of CO2 each year! 🌍',
  'greenhouse effect': 'The greenhouse effect is when gases in Earth\'s atmosphere trap the Sun\'s heat. This keeps our planet warm enough to live on, but too much can cause global warming! 🔆',
  'climate change': 'Climate change refers to long-term shifts in temperatures and weather patterns. Human activities have been the main driver since the 1800s, primarily due to burning fossil fuels like coal, oil and gas. 🌡️',
  'renewable energy': 'Renewable energy comes from sources that naturally replenish, such as sunlight, wind, water, and geothermal heat. Unlike fossil fuels, they produce little to no greenhouse gases! ☀️💨',
  'carbon offset': 'Carbon offsets are reductions in carbon dioxide emissions that compensate for emissions made elsewhere. Examples include funding renewable energy, forest conservation, or clean water projects! 💰🌳',
  'zero waste': 'Zero waste is a set of principles focused on waste prevention. The goal is to send nothing to landfill by reducing what we need, reusing as much as possible, and recycling the rest! 🚯♻️',
  'global warming': 'Global warming is the long-term heating of Earth\'s climate system due to human activities, primarily fossil fuel burning, which increases heat-trapping greenhouse gas levels in Earth\'s atmosphere. 🌡️🔥',
  'sustainability': 'Sustainability means meeting our own needs without compromising the ability of future generations to meet their needs. It encompasses economic, environmental, and social factors. 🌱♾️',
  'recycling': 'Recycling reduces waste sent to landfills, conserves natural resources, and reduces pollution. Recycling one ton of paper saves about 17 trees and 7,000 gallons of water! ♻️📄',
  'electric vehicles': 'Electric vehicles (EVs) run on electricity instead of fossil fuels, producing fewer emissions. An EV can reduce emissions by an average of 1.5 million grams of CO2 annually compared to a gasoline car! 🚗⚡'
};

export function AiBuddy({
  activeTab,
  footprintData,
  activities
}) {
  const [message, setMessage] = useState('');
  const [isVisible, setIsVisible] = useState(true);
  const [isMinimized, setIsMinimized] = useState(false);
  const [userInput, setUserInput] = useState('');
  const [chatHistory, setChatHistory] = useState([]);
  const [dailyFunFact, setDailyFunFact] = useState('');
  const chatContainerRef = useRef(null);

  // Generate contextual messages based on the current tab and data
  useEffect(() => {
    const messages = {
      dashboard: "👋 Welcome back! Let's check your eco-impact today.",
      activity: "Ready to log a new eco-friendly activity? I'm here to help! 🌱",
      charts: '📊 Your progress is looking great! Keep up the good work!',
      streaks: "🔥 You're on fire! Your eco-streaks are making a real difference.",
      tips: "💡 Looking for ways to improve? I've got some great tips for you!",
      compare: '🌍 See how you stack up against others in your community.'
    };
    setMessage(messages[activeTab] || messages.dashboard);
  }, [activeTab]);

  // Set daily fun fact
  useEffect(() => {
    const today = new Date().toDateString();
    const storedFact = localStorage.getItem('lastFunFact');
    const storedDate = localStorage.getItem('lastFunFactDate');
    
    if (storedDate !== today) {
      const randomFact = funFacts[Math.floor(Math.random() * funFacts.length)];
      setDailyFunFact(randomFact);
      localStorage.setItem('lastFunFact', randomFact);
      localStorage.setItem('lastFunFactDate', today);
      
      // Add fun fact to chat history
      setChatHistory(prev => [
        ...prev, 
        {
          type: 'ai',
          text: `📚 Daily Fun Fact: ${randomFact}`,
          timestamp: new Date()
        }
      ]);
    } else if (storedFact) {
      setDailyFunFact(storedFact);
    }
  }, []);

  // Auto scroll to bottom of chat
  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }, [chatHistory]);

  const handleSendMessage = e => {
    e.preventDefault();
    if (!userInput.trim()) return;

    // Add user message to chat
    setChatHistory(prev => [
      ...prev, 
      {
        type: 'user',
        text: userInput,
        timestamp: new Date()
      }
    ]);

    // Generate AI response based on user input
    const response = generateResponse(userInput.toLowerCase());
    
    setTimeout(() => {
      setChatHistory(prev => [
        ...prev, 
        {
          type: 'ai',
          text: response,
          timestamp: new Date()
        }
      ]);
    }, 500);
    
    setUserInput('');
  };

  const getRandomFact = () => {
    return funFacts[Math.floor(Math.random() * funFacts.length)];
  };

  const generateResponse = input => {
    // Check if user is asking for a fact
    if (input.includes('fact') || input.includes('tell me something') || input.includes('did you know')) {
      return `Here's a CO2 fact: ${getRandomFact()}`;
    }

    // Check knowledge base for relevant information
    for (const [key, value] of Object.entries(knowledgeBase)) {
      if (input.includes(key)) {
        return value;
      }
    }

    // Handle common questions
    if (input.includes('help') || input.includes('what can you do')) {
      return 'I can help you track your carbon footprint, provide eco-friendly tips, answer questions about sustainability, and share facts about carbon emissions! What would you like to know? 🌱';
    }
    
    if (input.includes('tip') || input.includes('advice') || input.includes('suggestion')) {
      const tips = [
        "Try using a reusable water bottle! It can save up to 156 plastic bottles annually. 💧",
        "Consider walking or biking for short trips instead of driving. It's good for the planet and your health! 🚶‍♀️",
        "Unplug electronics when not in use - even when turned off, they consume standby power. 🔌",
        "Replace standard light bulbs with LEDs to reduce energy consumption by up to 90%! 💡",
        "Try a meatless Monday! Reducing meat consumption even once a week makes a difference. 🥗",
        "Use cold water for laundry when possible - it saves energy and is gentler on your clothes! 👕"
      ];
      return tips[Math.floor(Math.random() * tips.length)];
    }
    
    if (input.includes('carbon') || input.includes('footprint')) {
      return 'Your carbon footprint is the total amount of greenhouse gases produced by your activities. The average person generates about 4 tons of CO2 each year! Want to learn how to reduce it? 🌍';
    }

    if (input.includes('hello') || input.includes('hi') || input.includes('hey')) {
      return "Hello! I'm your Eco Buddy, here to help with all things sustainability. How can I assist you today? 🌱";
    }

    if (input.includes('thank')) {
      return "You're welcome! Always happy to help on your eco-friendly journey. 💚";
    }

    if (input.includes('how') && input.includes('reduce')) {
      return "Great question! You can reduce your carbon footprint by: using public transport, reducing meat consumption, saving energy at home, and choosing sustainable products. Which area would you like specific tips on? 🌿";
    }

    // If no specific matches, provide a general response with a random fact
    return `I'm here to help with your eco-friendly journey! ${getRandomFact()} Feel free to ask about carbon footprints, sustainability tips, or your progress. 🌱`;
  };

  if (!isVisible) {
    return (
      <button 
        onClick={() => setIsVisible(true)} 
        className="fixed bottom-4 right-4 bg-green-500 text-white p-3 rounded-full shadow-lg hover:bg-green-600 transition-colors"
      >
        <MessageCircleIcon size={24} />
      </button>
    );
  }

  return (
    <div className="fixed bottom-4 right-4 z-50">
      <div className={`bg-white rounded-lg shadow-xl border border-gray-200 overflow-hidden transition-all duration-300 ${isMinimized ? 'w-16' : 'w-80'}`}>
        {/* Header */}
        <div className="bg-green-500 text-white p-3 flex items-center justify-between">
          <div className="flex items-center">
            <LeafIcon size={20} className="mr-2" />
            {!isMinimized && <span className="font-medium">Eco Buddy</span>}
          </div>
          <div className="flex items-center space-x-2">
            <button 
              onClick={() => setIsMinimized(!isMinimized)} 
              className="p-1 hover:bg-green-600 rounded"
            >
              {isMinimized ? <MessageCircleIcon size={16} /> : <span className="text-sm">−</span>}
            </button>
            <button 
              onClick={() => setIsVisible(false)} 
              className="p-1 hover:bg-green-600 rounded"
            >
              <XIcon size={16} />
            </button>
          </div>
        </div>

        {/* Chat Area */}
        {!isMinimized && (
          <div className="flex flex-col h-96">
            <div 
              ref={chatContainerRef} 
              className="flex-1 p-4 overflow-y-auto space-y-4"
            >
              {chatHistory.map((chat, index) => (
                <div 
                  key={index} 
                  className={`flex ${chat.type === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  {chat.type === 'ai' && (
                    <div className="w-8 h-8 rounded-full bg-green-100 flex items-center justify-center mr-2">
                      <span className="text-lg">🌱</span>
                    </div>
                  )}
                  <div 
                    className={`max-w-[80%] rounded-lg p-3 ${chat.type === 'user' ? 'bg-green-500 text-white' : 'bg-gray-100 text-gray-800'}`}
                  >
                    <p className="text-sm">{chat.text}</p>
                  </div>
                </div>
              ))}
            </div>

            {/* Input Area */}
            <form onSubmit={handleSendMessage} className="p-3 border-t border-gray-200">
              <div className="flex items-center space-x-2">
                <input 
                  type="text" 
                  value={userInput} 
                  onChange={e => setUserInput(e.target.value)} 
                  placeholder="Ask me anything..." 
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 text-sm" 
                />
                <button 
                  type="submit" 
                  className="p-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors"
                >
                  <SendIcon size={16} />
                </button>
              </div>
            </form>
          </div>
        )}
      </div>
    </div>
  );
}